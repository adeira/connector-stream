#!/usr/bin/env php
<?php declare(strict_types = 1);

use Adeira\Connector\Stream\IAllStreams;
use Adeira\Connector\Stream\LocationFactory;
use Symfony\Component\Process\ProcessBuilder;

/**
 * ffmpeg
 *   -i rtsp://test:test@192.168.0.123:554/live/ch01_0
 *   -hls_flags delete_segments+append_list
 *   -use_localtime 1
 *   -loglevel verbose
 *   -nostats
 * stream.m3u8
 */
final class StreamsProcessor
{

	/**
	 * @var \Adeira\Connector\Stream\IAllStreams
	 */
	private $streams;

	/**
	 * @var \Adeira\Connector\Stream\LocationFactory
	 */
	private $locationFactory;

	/**
	 * @var string
	 */
	private $streamsOutputDirectory;

	private $runningProcesses = [];

	public function __construct(IAllStreams $streams, LocationFactory $locationFactory, string $streamsOutputDirectory)
	{
		$this->streams = $streams;
		$this->locationFactory = $locationFactory;
		$this->streamsOutputDirectory = $streamsOutputDirectory;
	}

	public function run(): void
	{
		$sources = $this->findNewProcesses($this->runningProcesses);
		$this->startProcesses($sources);
		$this->waitForProcesses();
	}

	private function findNewProcesses(array $knownProcesses)
	{
		$sources = [];
		$streams = $this->streams->fetchAll();
		foreach ($streams as $stream) {
			$location = $this->locationFactory->createForStream($stream);
			$sources[$location->directory()] = $stream->rtspSource();
		}
		return array_diff_key($sources, $knownProcesses);
	}

	/**
	 * @return \Symfony\Component\Process\Process[]
	 */
	private function findRemovedProcesses(array $knownProcesses): array
	{
		$sources = [];
		$streams = $this->streams->fetchAll();
		foreach ($streams as $stream) {
			$location = $this->locationFactory->createForStream($stream);
			$sources[$location->directory()] = $stream->rtspSource();
		}
		return array_diff_key($knownProcesses, $sources);
	}

	/**
	 * @param array $sources [ID => rtsp://]
	 */
	private function startProcesses(array $sources)
	{
		foreach ($sources as $identifier => $inputStream) {
			$destination = $this->streamsOutputDirectory . DIRECTORY_SEPARATOR . $identifier;
			if (!is_dir($destination)) {
				mkdir($destination);
			}

			$process = $this->buildProcess($inputStream, $destination);
			$process->start();

			$this->runningProcesses[$identifier] = $process;
		}
	}

	private function waitForProcesses()
	{
		do { // main process must be alive longer than child processes
			$running = TRUE;
			foreach ($this->runningProcesses as $procKey => $proc) {
				if (!$proc->isRunning()) {
					unset($this->runningProcesses[$procKey]);
					$running &= FALSE;
				}
			}
			if (!$running) {
				break; // break only if all processes are stoped
			}

			sleep(1);

			// new stream has been added during stream consuming
			$newProcesses = $this->findNewProcesses($this->runningProcesses);
			$this->startProcesses($newProcesses);

			// stream has been removed during stream consuming
			$deprecatedProcesses = $this->findRemovedProcesses($this->runningProcesses);
			if ($deprecatedProcesses) {
				foreach ($deprecatedProcesses as $processKey => $process) {
					unset($this->runningProcesses[$processKey]);
					echo 'Stopping removed stream process PID ' . $process->getPid() . PHP_EOL;
					$process->stop();
				}
			}
		} while (TRUE);
	}

	private function buildProcess(string $inputStream, string $destination)
	{
		$binary = __DIR__ . '/../bin/ffmpeg';

		$processBuilder = new ProcessBuilder;
		$processBuilder->setPrefix($binary);
		$processBuilder->setArguments([
			'-i', $inputStream,
			'-hls_flags', 'delete_segments+append_list',
			'-use_localtime', 1,
			'-loglevel', 'verbose',
			'-nostats',
			"$destination/stream.m3u8",
		]);

		$process = $processBuilder->getProcess();
		$process->setTty(TRUE);
		return $process;
	}

}

/** @var Nette\DI\Container $dic */
$dic = require __DIR__ . '/../bootstrap.php';

$parameters = $dic->getParameters();
(new StreamsProcessor(
	$dic->getByType(\Adeira\Connector\Stream\IAllStreams::class),
	$dic->getByType(\Adeira\Connector\Stream\LocationFactory::class),
	$parameters['streamDir']
))->run();
